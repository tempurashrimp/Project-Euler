
/* Problem 002: 
    Each new term in the Fibonacci sequence is generated by 
    adding the previous two terms. By starting with 1 and 2, 
    the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...
    By considering the terms in the Fibonacci sequence whose 
    values do not exceed four million, find the sum of the even-valued terms. */

function solution(n) {
    // The function takes one input n, which is the higher limit
    // We initialize an array to recursively compute the next 
    // Fibonacci term (O(n) time).
    // let fibTerms = [1, 2, 3];
    let fibTerms = [0, 0, 2];
    let sumEven = 0;

    /* Code to compute Fibonacci sequence
    while (fibTerms[2] < n) {
        fibTerms[0] = fibTerms[1];
        fibTerms[1] = fibTerms[2];
        fibTerms[2] = fibTerms[0] + fibTerms[1];

        // Add to sumEven if the next Fibonacci term is even.
        if (fibTerms[2] % 2 == 0) {
            sumEven += fibTerms[2]
        }
    } */

    // A recurrence relation exists for even Fibonacci numbers E(n).
    // E(n) = 4E(n - 1) + E(n - 2)
    while (fibTerms[2] <= n) {
        // First add to sumEven
        sumEven += fibTerms[2];

        // Compute next term
        fibTerms[0] = fibTerms[1];
        fibTerms[1] = fibTerms[2];
        fibTerms[2] = 4 * fibTerms[1] + fibTerms[0];
    }

    return sumEven;
}

console.log(solution(4000000))

// Solved 17th July 2025.