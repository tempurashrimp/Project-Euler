
/*  Problem 029:
    Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:
    2^2 = 4     2^3 = 8     2^4 = 16    2^5 = 32
    3^2 = 9     3^3 = 27    3^4 = 81    3^5 = 243
    4^2 = 16    4^3 = 64    4^4 = 256   4^5 = 1024
    5^2 = 25    5^3 = 125   5^4 = 625   5^5 = 3125
    If they are placed in numerical order, with any repeats removed, we get the 
    following sequence of 15 distinct terms:
    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    How many distinct terms are in the sequence generated by a^b for
    2 <= a <= 100 and 2 <= b <= 100? */

#include "LargeNumber.h"
#include <iostream>
#include <unordered_map>

inline string exponentiate(int a, int b) {
    // Compute a ^ b
    LargeNumber outcome(to_string(a));
    LargeNumber c(to_string(a));

    for (int i = 1; i < b; ++i) {
        outcome = outcome * c;
    }

    return outcome.number;
}


int solution(int n) {
    // The function takes in one input n, which represents the upper bounds
    // of both a and b,

    // Store in an unordered map instead of set,
    // to save time from the auto-sorting of sets.
    unordered_map<string, bool> numbers;

    for (int a = 2; a <= n; ++a) {
        for (int b = 2; b <= n; ++b) {
            numbers[exponentiate(a, b)] = true;
        }
    }

    return numbers.size();
}


int main(void) {
    int n;
    cout << "Input an integer: ";
    cin >> n;
    cout << "Unique terms a^b for 2 <= a <= " << n 
    << " and 2 <= b <= " << n << " is " << solution(n); 
    return 0;
}

// Solved 31st August 2025.