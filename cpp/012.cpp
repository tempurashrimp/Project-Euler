
/* Problem 012:
    The sequence of triangle numbers is generated by adding the natural numbers. 
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
    The first ten terms would be 1, 3, 6, 10, 15, 21, 28, 36, 45, 55. 
    We can see that 28 is the first triangle number to have over five divisors.
    (Divisors of 28 are 1, 2, 4, 7, 14, 28)
    What is the value of the first triangle number to have over five hundred divisors? */


#include "PrimeSieve.h"

num solution(num n) {
    // The function takes one input n, which represents the
    // number of factors in our smallest triangle number
    PrimeSieve sieve;

    // Generate triangle numbers
    num triangle = 1, numFactors = 1, exponent = 0;
    vector<num> primePowers;

    // Note that primePowers does not have to be ordered such that,
    // each exponent corresponds to each prime in sieve.primes
    // as we are only interested in the exponents.
    for (num i = 1; true; ++i) {
        primePowers.clear();
        triangle = (i * (i + 1)) / 2;

        // Factorize triangle numbers
        if (triangle >= sieve.primes.back() * sieve.primes.back()) {
            sieve.extend();
        }

        for (num prime: sieve.primes) {
            exponent = 0;
            // prime is a factor of triangle
            while (triangle % prime == 0) {
                exponent++;
                triangle /= prime;
            }

            if (exponent) {
                primePowers.push_back(exponent);
            }
        }

        triangle = (i * (i + 1)) / 2;
        // Evaluate numFactors
        for (num power : primePowers) {
            numFactors *= (power + 1);
        }

        if (numFactors >= n) {
            return triangle;
        } else {
            numFactors = 1;
        }
    }

    return 0;
}

int main(void) {
    num n;
    cout << "Input an integer: ";
    cin >> n;
    cout << "Smallest triangle number with at least "
        << n << " factors is " << solution(n) << endl;

    return 0;
}