
/* Problem 002: 
    Each new term in the Fibonacci sequence is generated by 
    adding the previous two terms. By starting with 1 and 2, 
    the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...
    By considering the terms in the Fibonacci sequence whose 
    values do not exceed four million, find the sum of the even-valued terms. */
    
#include <iostream>
#include <cmath>
using namespace std;

#define num long long int

num solution(num n) {
    // The function takes one input n, which is the higher limit
    // We initialize an array to recursively compute the next 
    // Fibonacci term (O(n) time).
    num* fibTerms = new num[3]{0, 0, 2};
    num sumEven = 0;

    // A recurrence relation exists for even Fibonacci numbers E(n).
    // E(n) = 4E(n - 1) + E(n - 2)
    while (fibTerms[2] <= n) {
        // First add to sumEven
        sumEven += fibTerms[2];

        // Compute next term
        fibTerms[0] = fibTerms[1];
        fibTerms[1] = fibTerms[2];
        fibTerms[2] = 4 * fibTerms[1] + fibTerms[0];
    }

    delete fibTerms;
    return sumEven;
}

int main(void) {
    num n;
    cout << "Input an integer: ";
    cin >> n;
    cout << "Sum of even Fibonacci terms not exceeding "
        << n << " is " << solution(n) << endl;

    return 0;
}

// Solved 17th July 2025.