
''' Problem 012:
    The sequence of triangle numbers is generated by adding the natural numbers. 
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
    The first ten terms would be 1, 3, 6, 10, 15, 21, 28, 36, 45, 55. 
    We can see that 28 is the first triangle number to have over five divisors.
    (Divisors of 28 are 1, 2, 4, 7, 14, 28)
    What is the value of the first triangle number to have over five hundred divisors? '''
    
from PrimeSieve import PrimeSieve

def solution(n) -> int:
    n = int(n)
    
    # The function takes one input n, which represents the
    # number of factors in our smallest triangle number
    sieve = PrimeSieve()

    # Generate triangle numbers
    triangle, num_factors, exponent = 1, 1, 0
    prime_powers = []

    # Note that primePowers does not have to be ordered such that,
    # each exponent corresponds to each prime in sieve.primes
    # as we are only interested in the exponents.
    i = 1
    while True:
        prime_powers = []
        triangle = (i * (i + 1)) // 2

        # Factorize triangle numbers
        if (triangle ** 0.5) >= sieve.primes[len(sieve.primes) - 1]:
            sieve.extend()
        
        for prime in sieve.primes:
            exponent = 0
            # prime is a factor of triangle
            while triangle % prime == 0:
                exponent += 1
                triangle //= prime

            if (not not exponent):
                prime_powers.append(exponent)

        triangle = (i * (i + 1)) // 2
        # Evaluate numFactors
        for power in prime_powers:
            num_factors *= (power + 1)

        if num_factors >= n:
            return triangle
        else:
            num_factors = 1
            i += 1
        


def main():
    n = input("Type an integer: ")
    print(f"The smallest triangle number with at least {n} factors is {solution(n)}")
    
if __name__ == "__main__":
    main()